// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuickProject.Data;

namespace QuickProject.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190312170941_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EntityModel.AcadamicYear", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CommentThreadId");

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<DateTime>("EndDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("UpdateByUserId");

                    b.Property<DateTime>("UpdateOn");

                    b.HasKey("Id");

                    b.HasIndex("CommentThreadId");

                    b.ToTable("AcadamicYears");
                });

            modelBuilder.Entity("EntityModel.Comment", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Body");

                    b.Property<string>("CommentThreadId");

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Title");

                    b.Property<string>("UpdateByUserId");

                    b.Property<DateTime>("UpdateOn");

                    b.HasKey("Id");

                    b.HasIndex("CommentThreadId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("EntityModel.CommentThread", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Title");

                    b.Property<string>("UpdateByUserId");

                    b.Property<DateTime>("UpdateOn");

                    b.HasKey("Id");

                    b.ToTable("CommentThreads");
                });

            modelBuilder.Entity("EntityModel.Course", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AcadamicYearId1");

                    b.Property<string>("CommentThreadId");

                    b.Property<string>("CourseName");

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Details");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int>("DurationInDays");

                    b.Property<double>("Fees");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("UpdateByUserId");

                    b.Property<DateTime>("UpdateOn");

                    b.HasKey("Id");

                    b.HasIndex("AcadamicYearId1");

                    b.HasIndex("CommentThreadId");

                    b.ToTable("Courses");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Course");
                });

            modelBuilder.Entity("EntityModel.Payments", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CommentThreadId");

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<double>("PaidAmount");

                    b.Property<int>("PaymentType");

                    b.Property<string>("StudentId");

                    b.Property<string>("TranscationId");

                    b.Property<string>("UpdateByUserId");

                    b.Property<DateTime>("UpdateOn");

                    b.HasKey("Id");

                    b.HasIndex("CommentThreadId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TranscationId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("EntityModel.Person", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address_1");

                    b.Property<string>("Address_2");

                    b.Property<string>("City");

                    b.Property<string>("CommentThreadId");

                    b.Property<string>("Comments_Summary");

                    b.Property<string>("Country");

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email");

                    b.Property<string>("FaxNumber");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName");

                    b.Property<string>("MiddleName");

                    b.Property<string>("MobileNumber");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("PostalCode");

                    b.Property<string>("State");

                    b.Property<string>("Title");

                    b.Property<string>("UpdateByUserId");

                    b.Property<DateTime>("UpdateOn");

                    b.HasKey("Id");

                    b.HasIndex("CommentThreadId");

                    b.ToTable("People");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Person");
                });

            modelBuilder.Entity("EntityModel.Subject", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CommentThreadId");

                    b.Property<string>("CourseId");

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsPractical");

                    b.Property<bool>("IsTheory");

                    b.Property<string>("Name");

                    b.Property<string>("Summary");

                    b.Property<string>("Syllabus");

                    b.Property<string>("UpdateByUserId");

                    b.Property<DateTime>("UpdateOn");

                    b.HasKey("Id");

                    b.HasIndex("CommentThreadId");

                    b.HasIndex("CourseId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("EntityModel.TenantProfile", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CommentThreadId");

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Host");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Module");

                    b.Property<string>("Name");

                    b.Property<string>("UpdateByUserId");

                    b.Property<DateTime>("UpdateOn");

                    b.HasKey("Id");

                    b.HasIndex("CommentThreadId");

                    b.ToTable("TenantProfiles");
                });

            modelBuilder.Entity("EntityModel.Transcation", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Amount");

                    b.Property<string>("CommentThreadId");

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsRefund");

                    b.Property<string>("PaymentGateWay");

                    b.Property<string>("Response");

                    b.Property<bool>("Succeeded");

                    b.Property<DateTime>("TranscationDate");

                    b.Property<string>("UpdateByUserId");

                    b.Property<DateTime>("UpdateOn");

                    b.HasKey("Id");

                    b.HasIndex("CommentThreadId");

                    b.ToTable("Transcations");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("EntityModel.AppliedCourse", b =>
                {
                    b.HasBaseType("EntityModel.Course");

                    b.Property<string>("AcadamicYearId");

                    b.Property<double>("Fee");

                    b.Property<double>("ScholarShipDeduction");

                    b.Property<string>("StudentId");

                    b.HasIndex("AcadamicYearId");

                    b.HasIndex("StudentId");

                    b.HasDiscriminator().HasValue("AppliedCourse");
                });

            modelBuilder.Entity("EntityModel.Student", b =>
                {
                    b.HasBaseType("EntityModel.Person");

                    b.Property<string>("EnrollmentNumber");

                    b.Property<string>("FatherId");

                    b.Property<string>("MotherId");

                    b.HasIndex("FatherId");

                    b.HasIndex("MotherId");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("EntityModel.AcadamicYear", b =>
                {
                    b.HasOne("EntityModel.CommentThread", "CommentThread")
                        .WithMany()
                        .HasForeignKey("CommentThreadId");
                });

            modelBuilder.Entity("EntityModel.Comment", b =>
                {
                    b.HasOne("EntityModel.CommentThread", "CommentThread")
                        .WithMany("Comments")
                        .HasForeignKey("CommentThreadId");
                });

            modelBuilder.Entity("EntityModel.Course", b =>
                {
                    b.HasOne("EntityModel.AcadamicYear")
                        .WithMany("Courses")
                        .HasForeignKey("AcadamicYearId1");

                    b.HasOne("EntityModel.CommentThread", "CommentThread")
                        .WithMany()
                        .HasForeignKey("CommentThreadId");
                });

            modelBuilder.Entity("EntityModel.Payments", b =>
                {
                    b.HasOne("EntityModel.CommentThread", "CommentThread")
                        .WithMany()
                        .HasForeignKey("CommentThreadId");

                    b.HasOne("EntityModel.Student", "Student")
                        .WithMany("Payments")
                        .HasForeignKey("StudentId");

                    b.HasOne("EntityModel.Transcation", "Transcation")
                        .WithMany()
                        .HasForeignKey("TranscationId");
                });

            modelBuilder.Entity("EntityModel.Person", b =>
                {
                    b.HasOne("EntityModel.CommentThread", "CommentThread")
                        .WithMany()
                        .HasForeignKey("CommentThreadId");
                });

            modelBuilder.Entity("EntityModel.Subject", b =>
                {
                    b.HasOne("EntityModel.CommentThread", "CommentThread")
                        .WithMany()
                        .HasForeignKey("CommentThreadId");

                    b.HasOne("EntityModel.Course")
                        .WithMany("Subjects")
                        .HasForeignKey("CourseId");
                });

            modelBuilder.Entity("EntityModel.TenantProfile", b =>
                {
                    b.HasOne("EntityModel.CommentThread", "CommentThread")
                        .WithMany()
                        .HasForeignKey("CommentThreadId");
                });

            modelBuilder.Entity("EntityModel.Transcation", b =>
                {
                    b.HasOne("EntityModel.CommentThread", "CommentThread")
                        .WithMany()
                        .HasForeignKey("CommentThreadId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EntityModel.AppliedCourse", b =>
                {
                    b.HasOne("EntityModel.AcadamicYear", "AcadamicYear")
                        .WithMany()
                        .HasForeignKey("AcadamicYearId");

                    b.HasOne("EntityModel.Student")
                        .WithMany("Courses")
                        .HasForeignKey("StudentId");
                });

            modelBuilder.Entity("EntityModel.Student", b =>
                {
                    b.HasOne("EntityModel.Person", "Father")
                        .WithMany()
                        .HasForeignKey("FatherId");

                    b.HasOne("EntityModel.Person", "Mother")
                        .WithMany()
                        .HasForeignKey("MotherId");
                });
#pragma warning restore 612, 618
        }
    }
}
